#include <iostream>

using namespace std;

/*
指针
指针和引用都实现了对其他对象的间接访问。但是还有一些不同
1. 指针本身就是一个对象，允许对指针进行赋值和拷贝。在生命周期内，他可以指向几个不同的对象。
2. 指针不需要在定义的时候赋初值，和内置类型一样，指针如果没有初始化，指针也将拥有一个不确定值。

引用： 初恋->白头到老
指针： 可以随便换

给指针赋值，就是令他存放一个新的地址值，从而指向一个新的地址。


*/

int main() {
    //指针基础
    int ival = 42;
    int *p = &ival; //p存放变量ival的地址。
    cout<<ival<<endl; //42
    cout<<p<<endl;  //0x324f3ff9b4
    cout<<*p<<endl; //42

    *p = 2; //对象也将会被修改， 该操作仅仅适用于那些确实指向某个对象的有效指针。
    cout<<ival<<endl; //2
    cout<<*p<<endl;   //2
    //空指针： 试图访问空指针是不背允许的
    //以下行为会创建空指针
    /*
    使用未经初始化的指针是因为运行时错误的一个原因。
    在大多数编译情况下， 未经初始化的指针所占内存空间的内容是一个地址值，但是改地址可能并不存在，或者存在。 不论怎样都很难判断指向的内存的内容是不是合法的。
    NOTE： 初始化所有的指针，尽量等定义了对象之后再定义指向他的指针。如果实在不知道指向何处，那就初始化为0或者nullptr。
    
    */
    int *p1 = nullptr;
    int *p2 = 0;
    int *p3 = NULL;


    //有时候很难知道赋值到底是改变指针的值还是指针所指对象的值， 最好的办法是： 赋值永远改变等号左侧的对象。

    //条件值： 任何非空指针（有指向的对象）的条件值都是true

    return 0;
}